<project name="HealthConnect Salesforce Ant tasks" basedir="." xmlns:sf="antlib:com.salesforce">
    <property file="build.properties"/>
	<property file="sfcredentials.properties"/>
    <property environment="env"/>
	<property file="${sf.orgname}.vcs.commit.properties"/>
	
	<property name="dir.base" value="${basedir}" />
	<property name="dir.lib" value="${basedir}/lib" />
	<property name="dir.root" value="${basedir}/.." />
	<property name="dir.mobile" value="${dir.root}/ep_mobile" />
	<property name="dir.src" value="${dir.mobile}/src" />
	<property name="dir.componentsToDelete" value="${dir.mobile}/componentsToDelete" />
	<property name="dir.documentation" value="${dir.root}/doc" />
	<property name="dir.coverage" value="${dir.root}/coverage" />
	
    
	<!-- Import macros around sf:deploy to install/uninstall packages -->
    <import file="ant-salesforce.xml"/>
	
	<taskdef 
		name="updatePackage" 
		classname="com.evariant.ciutils.ZipPackageTask"
		classpath="${basedir}/lib/ant-evariant-ciutils.jar"/>

    <!-- Does a complete deploy of all code to new org. -->
	<target name="fullDeploy" >
		<!-- Upload the remaining contents of the org -->
		<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="${dir.src}" checkOnly="${sf.checkonly}" testLevel="RunAllTestsInOrg"/>
    </target>
	
	<!-- Does a complete deploy of all code to new org. -->
	<target name="unitTest">
		<!-- Upload the remaining contents of the org -->
		<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="." runAllTests="true" checkOnly="false" />
    </target>
	
	<target name="autobuild" depends="deleteComponentsSkipTests, autobuildPatch">				
		<propertyfile file="${sf.orgname}.vcs.commit.properties">
			<entry key="build.vcs.previousSuccessfulBuildNumber" value="${build.vcs.number}" />
		</propertyfile>
	</target>
    
    <target name="autobuildPatch">
        <!-- Delete contents that cannot be pushed to patch orgs. -->
        <delete dir="${dir.src}/profiles" failonerror="false"/>
        <delete dir="${dir.src}/connectedApps" failonerror="false"/>
        
		<!-- Upload the remaining contents of the org. -->
		<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" allowMissingFiles="true" maxPoll="${sf.maxPoll}" deployRoot="${dir.src}" checkOnly="${sf.checkonly}" testLevel="RunLocalTests"/>
        
        <!-- Tell git to bring back deleted files. -->
        <exec executable="git" >
            <arg value="checkout"/>
            <arg value="-f"/>
        </exec>
	</target>
	
	<target name="installPackage">
		<!-- Upload the contents of the "HealthConnect4" package -->
		<installPackage namespace="HC4" version="${sf.packageVersion}" username="${sf.username}" password="${sf.password}" packagePassword="${sf.packagePassword}"/>	
	</target>
	
	<!-- Updates and adds the components in the org with the ones defined in package.xml -->
	<target name="updateComponents">		
		<!-- Upload the remaining contents of the org -->
		<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="${dir.src}" runAllTests="false" checkOnly="${sf.checkonly}" />
    </target>
	
	<!-- Removes components from the org that is specified in the destructiveChanges.xml file. -->
	<target name="deleteComponents">		
		<!-- Upload the remaining contents of the org -->
		<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="${dir.componentsToDelete}" runAllTests="true" ignoreWarnings="true" checkOnly="${sf.checkonly}" />
    </target>
	
	<target name="deleteComponentsSkipTests">		
		<!-- Upload the remaining contents of the org -->
		<sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="${dir.componentsToDelete}" runAllTests="false" ignoreWarnings="true" />
    </target>
	
	<target name="generateApexDoc">
		<delete dir="${dir.documentation}" failonerror="false"/>
		<mkdir dir="${dir.documentation}"/>

		<java jar="${apexdocjar}" fork="true">
			<arg line="-s ${dir.src}/classes" />
			<arg line="-t ${dir.documentation}" />
			<arg line="-a author.txt" />
			<arg line="-p global,public,protected" />
		</java>
		
		<zip destfile="${dir.root}/healthconnect_doc.zip" 
			basedir="${dir.documentation}/SfApexDocs" />

	</target>
	
	<!-- Returns an org to near out of the box state. -->
	<target name="fullUninstall" depends="purge">
	
    </target>
	  
	<target name="incrementalUpdate">
		<echo message="Current commit number : ${build.vcs.number}"/>
        <condition property="previousbuild.set" else="false">
            <isset property="build.vcs.previousSuccessfulBuildNumber"/>
        </condition>
        <if>
            <equals arg1="${previousbuild.set}" arg2="false" casesensitive="false" />
            <then>
                <antcall target="fullDeploy" />
            </then>
            <else>
                <echo message="Previous successful commit number : ${build.vcs.previousSuccessfulBuildNumber}"/>
                
                <exec executable="git" output="changes.txt">
                    <arg value="diff-tree"/>
                    <arg value="--no-commit-id"/>
                    <arg value="--name-status"/>
                    <arg value="-r"/>
                    <arg value="${build.vcs.previousSuccessfulBuildNumber}"/>
                    <arg value="${build.vcs.number}"/>
                </exec>
                
                <delete file="${sf.pkgName}" failonerror="false"/>
                
                <updatePackage outputFile="${sf.pkgName}" inputfile="changes.txt" sourcePath="${dir.src}/" gitPathString="Salesforce/ep_mobile/src/" salesforceApiVersion="${sf.apiVersion}" />

                <if>
                    <available file="${sf.pkgName}" />
                    <then>
                        <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.pkgName}" runAllTests="true" checkOnly="${sf.checkonly}" />
                    </then>
                    <else>
                        <echo message="There are no files to push to the org!" />
                    </else>
                </if>
            </else>
        </if>
    </target>

    <!-- Retrieve an unpackaged set of metadata from your org -->
    <!-- The file unpackaged/package.xml lists what is to be retrieved -->
    <target name="retrieveUnpackaged">
      <mkdir dir="retrieveUnpackaged"/>
      <!-- Retrieve the contents into another directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveUnpackaged" unpackaged="unpackaged/package.xml"/>
    </target>

    <!-- Retrieve all the items of a particular metadata type -->
    <target name="bulkRetrieve">
      <sf:bulkRetrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" metadataType="${sf.metadataType}" retrieveTarget="retrieveUnpackaged"/>
    </target>

    <!-- Retrieve metadata for all the packages specified under packageNames -->
    <target name="retrievePkg">
      <sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="retrieveOutput" packageNames="${sf.pkgName}"/>
    </target>

    <!-- Deploy the unpackaged set of metadata retrieved with retrieveUnpackaged -->
    <target name="deployUnpackaged">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="../healthconnect/src"/>
    </target>

    <!-- Deploy a zip of metadata files to the org -->
    <target name="deployZip">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" zipFile="${sf.zipFile}" pollWaitMillis="1000"/>
    </target>

    <!-- Shows deploying code & running tests for code in directory -->
    <target name="deployCode">
      <!-- Upload the contents of the "codepkg" directory, running the tests for just 1 class -->
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg">
        <runTest>SampleDeployClass</runTest>
      </sf:deploy>
    </target>

    <!-- Shows removing code; only succeeds if done after deployCode -->
    <target name="undeployCode">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="removecodepkg"/>
    </target>

    <!-- Shows retrieving code; only succeeds if done after deployCode -->
    <target name="retrieveCode">
      <!-- Retrieve the contents listed in the file codepkg/package.xml into the codepkg directory -->
      <sf:retrieve username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" retrieveTarget="codepkg" unpackaged="codepkg/package.xml"/>
    </target>

    <!-- Shows deploying code, running all tests, and running tests (1 of which fails), and logging. -->
    <target name="deployCodeFailingTest">
      <!-- Upload the contents of the "codepkg" package, running all tests -->
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="codepkg" runAllTests="true" logType="Debugonly"/>
    </target>

    <!-- Shows check only; never actually saves to the server -->
    <target name="deployCodeCheckOnly">
      <sf:deploy username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" maxPoll="${sf.maxPoll}" deployRoot="../healthconnect/src" checkOnly="true"/>
    </target>

	<!-- Retrieve the information of all items of a particular metadata type -->
    <target name="listMetadata">
      <sf:listMetadata username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}" metadataType="${sf.metadataType}"/>
    </target>

	<!-- Retrieve the information on all supported metadata type -->
    <target name="describeMetadata">
      <sf:describeMetadata username="${sf.username}" password="${sf.password}" serverurl="${sf.serverurl}"/>
    </target>
	
	<!-- Purges an organization of most customizations and components -->
	<target name="purge" description="Purges an organization of most customizations and components">
    <!-- Clean up any previous purge -->
    <delete dir="purge" />
    <mkdir dir="purge" />

    <!-- Prepare a wildcard package definition with as many metadata types as possible -->
    <echo file="purge/package.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
        <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <types><members>*</members><name>AccountCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>AccountOwnerSharingRule</name></types>
            <types><members>*</members><name>AccountSharingRules</name></types>
            <types><members>*</members><name>AnalyticSnapshot</name></types>
            <types><members>*</members><name>ApexClass</name></types>
            <types><members>*</members><name>ApexComponent</name></types>
            <types><members>*</members><name>ApexPage</name></types>
            <types><members>*</members><name>ApexTrigger</name></types>
            <types><members>*</members><name>ApexTriggerCoupling</name></types>
            <types><members>*</members><name>AuthProvider</name></types>
            <types><members>*</members><name>BusinessProcess</name></types>
            <types><members>*</members><name>CallCenter</name></types>
            <types><members>*</members><name>CampaignCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>CampaignOwnerSharingRule</name></types>
            <types><members>*</members><name>CampaignSharingRules</name></types>
            <types><members>*</members><name>CaseCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>CaseOwnerSharingRule</name></types>
            <types><members>*</members><name>CaseSharingRules</name></types>
            <types><members>*</members><name>CompactLayout</name></types>
            <types><members>*</members><name>ConnectedApp</name></types>
            <types><members>*</members><name>ContactCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>ContactOwnerSharingRule</name></types>
            <types><members>*</members><name>ContactSharingRules</name></types>
            <types><members>*</members><name>CustomApplication</name></types>
            <types><members>*</members><name>CustomApplicationComponent</name></types>
            <types><members>*</members><name>CustomField</name></types>
            <types><members>*</members><name>CustomLabel</name></types>
            <types><members>*</members><name>CustomLabels</name></types>
            <types><members>*</members><name>CustomObject</name></types>
            <types><members>*</members><name>CustomObjectCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>CustomObjectOwnerSharingRule</name></types>
            <types><members>*</members><name>CustomObjectSharingRules</name></types>
            <types><members>*</members><name>CustomObjectTranslation</name></types>
            <types><members>*</members><name>CustomPageWebLink</name></types>
            <types><members>*</members><name>CustomTab</name></types>
            <types><members>*</members><name>Dashboard</name></types>
            <types><members>*</members><name>DataCategoryGroup</name></types>
            <types><members>*</members><name>Document</name></types>
            <types><members>*</members><name>EmailTemplate</name></types>
            <types><members>*</members><name>FieldSet</name></types>
            <types><members>*</members><name>FlexiPage</name></types>
            <types><members>*</members><name>Flow</name></types>
            <types><members>*</members><name>Group</name></types>
            <types><members>*</members><name>LeadCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>LeadOwnerSharingRule</name></types>
            <types><members>*</members><name>LeadSharingRules</name></types>
            <types><members>*</members><name>Letterhead</name></types>
            <types><members>*</members><name>ListView</name></types>
            <types><members>*</members><name>NamedFilter</name></types>
            <types><members>*</members><name>OpportunityCriteriaBasedSharingRule</name></types>
            <types><members>*</members><name>OpportunityOwnerSharingRule</name></types>
            <types><members>*</members><name>OpportunitySharingRules</name></types>
            <types><members>*</members><name>RecordType</name></types>
            <types><members>*</members><name>RemoteSiteSetting</name></types>
            <types><members>*</members><name>Report</name></types>
            <types><members>*</members><name>ReportType</name></types>
            <types><members>*</members><name>SamlSsoConfig</name></types>
            <types><members>*</members><name>Scontrol</name></types>
            <types><members>*</members><name>SharingReason</name></types>
            <types><members>*</members><name>StaticResource</name></types>
            <types><members>*</members><name>ValidationRule</name></types>
            <types><members>*</members><name>WebLink</name></types>
            <types><members>*</members><name>Workflow</name></types>
            <types><members>*</members><name>WorkflowAlert</name></types>
            <types><members>*</members><name>WorkflowApex</name></types>
            <types><members>*</members><name>WorkflowChatterPost</name></types>
            <types><members>*</members><name>WorkflowFieldUpdate</name></types>
            <types><members>*</members><name>WorkflowKnowledgePublish</name></types>
            <types><members>*</members><name>WorkflowOutboundMessage</name></types>
            <types><members>*</members><name>WorkflowQuickCreate</name></types>
            <types><members>*</members><name>WorkflowRule</name></types>
            <types><members>*</members><name>WorkflowSend</name></types>
            <types><members>*</members><name>WorkflowTask</name></types>
            <version>${sf.apiVersion}</version>
        </Package>
    ]]></echo>

    <!--
     ! These metadata types are either unpackageable, or tricky because
     ! they are coupled to profiles (app) or users (permissionsets):
     ! <types><members>*</members><name>ApprovalProcess</name></types>
     ! <types><members>*</members><name>AssignmentRule</name></types>
     ! <types><members>*</members><name>AssignmentRules</name></types>
     ! <types><members>*</members><name>AutoResponseRule</name></types>
     ! <types><members>*</members><name>AutoResponseRules</name></types>
     ! <types><members>*</members><name>Community</name></types>
     ! <types><members>*</members><name>CustomSite</name></types>
     ! <types><members>*</members><name>EscalationRule</name></types>
     ! <types><members>*</members><name>EscalationRules</name></types>
     ! <types><members>*</members><name>HomePageComponent</name></types>
     ! <types><members>*</members><name>HomePageLayout</name></types>
     ! <types><members>*</members><name>InstalledPackage</name></types>
     ! <types><members>*</members><name>Layout</name></types>
     ! <types><members>*</members><name>PermissionSet</name></types>
     ! <types><members>*</members><name>Profile</name></types>
     ! <types><members>*</members><name>Queue</name></types>
     ! <types><members>*</members><name>QuickAction</name></types>
     ! <types><members>*</members><name>Role</name></types>
     ! <types><members>*</members><name>Settings</name></types>
     ! <types><members>*</members><name>SynonymDictionary</name></types>
     ! <types><members>*</members><name>WorkflowActionFlow</name></types>
     !-->

    <!-- Retrieve the wildcard package definition -->
    <sf:retrieve
    username="${sf.username}"
    password="${sf.password}"
    serverurl="${sf.serverurl}"
    retrieveTarget="purge"
    unpackaged="purge/package.xml"
    pollWaitMillis="1000" />

    <!--
     ! These components retrieve ok, but attempting to deploy them throws:
     ! "Cannot create workflow directly; must create the CustomObject first"
     ! We delete them so they don't make their way into destructiveChanges.xml
     !-->
    <delete file="purge/workflows/Question.workflow" />
    <delete file="purge/workflows/Reply.workflow" />
    <delete file="purge/workflows/SocialPersona.workflow" />
    <delete file="purge/workflows/SocialPost.workflow" />

    <!-- Name the package definition -->
    <replace file="purge/package.xml">
        <replacetoken><![CDATA[</version>]]></replacetoken>
        <replacevalue><![CDATA[</version><fullName>Purge</fullName>]]></replacevalue>
    </replace>

    <!-- Re-deploy the now-named wildcard package definition -->
    <sf:deploy
    username="${sf.username}"
    password="${sf.password}"
    serverurl="${sf.serverurl}"
    deployRoot="purge"
    purgeOnDelete="true"
    pollWaitMillis="1000" />

    <!-- Retrieve by name, giving us an explicit package definition -->
    <sf:retrieve
    username="${sf.username}"
    password="${sf.password}"
    serverurl="${sf.serverurl}"
    retrieveTarget="purge"
    packageNames="Purge"
    pollWaitMillis="1000" />

    <!--
     ! Trash local components: we only needed them to get an explicit package definition.
     ! Now we turn the explicit package definition into explicit destructive changes, and
     ! blank out the package definition.
     !-->
    <delete includeEmptyDirs="true" dir="purge" includes="**/*" excludes="*.xml" />
    <copy file="purge/package.xml" tofile="purge/destructiveChanges.xml" />
    <echo file="purge/package.xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
        <Package xmlns="http://soap.sforce.com/2006/04/metadata">
            <version>${sf.apiVersion}</version>
        </Package>
    ]]></echo>

    <!-- Perform explicit deploy over the top of the org which should delete all components -->
    <sf:deploy
    username="${sf.username}"
    password="${sf.password}"
    serverurl="${sf.serverurl}"
    deployRoot="purge"
    purgeOnDelete="true"
    pollWaitMillis="1000" />

    <!-- Tidy up after ourselves -->
    <delete dir="purge" />
</target>

</project>
